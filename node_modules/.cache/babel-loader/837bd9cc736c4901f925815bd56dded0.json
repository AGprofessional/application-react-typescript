{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akash\\\\resume 2023\\\\ramp engineering\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport json from \"../src/mock-data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [data, setData] = useState([]);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (isAllEmployees) {\n      const mergedArray = transactions && Array.from(new Set([...data, ...transactions]));\n      mergedArray && setData(mergedArray);\n    }\n  }, [transactions]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      setIsAllEmployees(true);\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          } else if (newValue === EMPTY_EMPLOYEE) {\n            setIsAllEmployees(true);\n            setData([]);\n            setIsLoading(true);\n            await loadAllTransactions();\n          } else {\n            setIsAllEmployees(false);\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions && isAllEmployees ? data : transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), transactions !== null && isAllEmployees && data.length < json.transactions.length && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"tB1C5G6Fxp1CoZswmvj/upc4T1A=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","json","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","setData","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","mergedArray","Array","from","Set","loading","item","value","id","label","firstName","lastName","newValue","length"],"sources":["C:/Users/akash/resume 2023/ramp engineering/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\nimport { Transaction } from \"../src/utils/types\";\nimport json from \"../src/mock-data.json\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n const [isAllEmployees, setIsAllEmployees]=useState(true);\n const [data, setData] = useState<Transaction[]>([]); \n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n    await employeeUtils.fetchAll()\n    setIsLoading(false)\n    await paginatedTransactionsUtils.fetchAll()\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(()=>{\n    if (isAllEmployees){\n    const mergedArray = transactions && Array.from(new Set([...data, ...transactions]));\n    mergedArray && setData(mergedArray);}\n  }, [transactions]);\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      setIsAllEmployees(true); \n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n \n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }else if (newValue===EMPTY_EMPLOYEE){\n              setIsAllEmployees(true); \n              setData([]); \n              setIsLoading(true);\n              await loadAllTransactions() \n              }else{\n                setIsAllEmployees(false);\n            await loadTransactionsByEmployee(newValue.id)\n          }}}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n        <Transactions transactions={transactions && isAllEmployees? data: transactions} /> \n          {transactions !== null && isAllEmployees && data.length<json.transactions.length && (\n              <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}